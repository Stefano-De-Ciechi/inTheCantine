"use strict";

// this class is used as a wrapper to interact directly with the REST API
class Api {

    /* ===== Musicians Endpoints ===== */

    // get all musicians and return an array of javascript objects, result can be filtered by passing a filtering query
    static getAllMusicians = async (filterQuery) => {

        let url = "/api/musicians";
        if (filterQuery) url += "?" + filterQuery;

        let response = await fetch(url, {
            method : 'get',
            headers : {
                'Accept': 'application/json'
            }
        });

        return await response.json();
    };

    // get a musician profile given it's profileID
    static getMusicianByID = async (profileID) => {
        let response = await fetch('/api/musicians/' + profileID, {
            method : 'get',
            headers : {
                'Accept': 'application/json'
            }
        });

        return await response.json();
    }

    // create a new entry in the MusiciansCredentials table in the database
    static signupMusician = async (username, password) => {

        let response = await fetch('/api/signup/musicians', {
            method : 'post',
            headers : {
                'Content-Type' : 'application/json'
            },
            body : JSON.stringify({
                "user" : username,
                "password" : password
            })
        });

        return await response.json();
    }

    // send a login request for a musician user
    static loginMusician = async (username, password) => {
        let response = await fetch('/api/login/musicians', {
            method : 'post',
            headers : {
                'Content-Type': 'application/json'
            },
            body : JSON.stringify({
                "username" : username,
                "password" : password
            })
        });

        return await response.json();
    }

    // create a new entry in the Musicians table in the database
    static createMusicianProfile = async(musician, image) => {
        // the function works in two separated steps:

        // (1) if an image is passed, a first fetch is used to upload the file and retreive the path generated by the server
        let imagePath = null;
        if (image !== undefined) {
            let data = new FormData();
            data.append('file', image);
            imagePath = await fetch('/api/media/images', {
                method : 'post',
                // do not specify a Content-Type as the browser will do it automatically, along with the file size
                body : data
            });
        }

        // if the file is uploaded correctly, it's path is inserted in the musician object, else it is set to null
        musician.profilePicturePath = (imagePath != null) ? (await imagePath.json())['filePath'] : null;

        // (2) a second fetch is used to upload all musician's informations to the database
        let response = await fetch('/api/musicians', {
            method : 'post',
            headers : {
                "Content-Type" : "application/json"
            },
            body : JSON.stringify(musician)
        });

        return await response.json();
    }

    // modify an existing Musician row in the database
    static modifyMusicianProfile = async (musician, image) => {
        // this function works in two steps as described previously in the createMusicianProfile function

        let imagePath = null;
        if (image !== undefined) {
            let data = new FormData();
            data.append('file', image);
            imagePath = await fetch('/api/media/images', {
                method : 'post',
                // do not specify a Content-Type as the browser will do it automatically, along with the file size
                body : data
            });
        }

        musician.profilePicturePath = (imagePath != null) ? (await imagePath.json())['filePath'] : musician.profilePicturePath;

        let response = await fetch('/api/musicians', {
            method : 'put',
            headers : {
                "Content-Type" : "application/json"
            },
            body : JSON.stringify(musician)
        });

        return await response.json();

    }

    // send a logout request for the current logged in musician
    static logoutMusician = async () => {
        let response = await fetch('/api/logout/musicians/current', {
            method : 'delete',
        });

        return await response.json();
    }

    /* ===== Groups Endpoints ===== */

    // get all groups and return an array of javascript objects, result can be filtered by passing a filtering query
    static getAllGroups = async (filterQuery) => {

        let url = "/api/groups";
        if (filterQuery) url += "?" + filterQuery;

        let response = await fetch(url, {
            method : 'get',
            headers : {
                'Accept': 'application/json'
            }
        });

        return await response.json();
    }

    // get a group given it's profileID
    static getGroupByID = async (profileID) => {
        let response = await fetch('/api/groups/' + profileID, {
            method : 'get',
            headers : {
                'Accept': 'application/json'
            }
        });

        return await response.json();
    }

    // create a new entry in the GroupsCredentials table in the database
    static signupGroup = async(username, password) => {
        let response = await fetch('/api/signup/groups', {
            method : 'post',
            headers : {
                'Content-Type': 'application/json'
            },
            body : JSON.stringify({
                "user" : username,
                "password" : password
            })
        });

        return await response.json();
    }

    // send a login request for a musician user
    static loginGroup = async(username, password) => {
        let response = await fetch('/api/login/groups', {
            method : 'post',
            headers : {
                'Content-Type': 'application/json'
            },
            body : JSON.stringify({
                "username" : username,
                "password" : password
            })
        });

        return await response.json();
    }

    // create a new entry in the Musicians table in the database
    static createGroupProfile = async(group, image) => {
        // the function works in two separated steps:

        // (1) if an image is passed, a first fetch is used to upload the file and retreive the path generated by the server
        let imagePath = null;
        if (image !== undefined) {
            let data = new FormData();
            data.append('file', image);
            imagePath = await fetch('/api/media/images', {
                method : 'post',
                // do not specify a Content-Type as the browser will do it automatically, along with the file size
                body : data
            });
        }

        // if the file is uploaded correctly, it's path is inserted in the musician object, else it is set to null
        group.profilePicturePath = (imagePath != null) ? (await imagePath.json())['filePath'] : null;

        // (2) a second fetch is used to upload all musician's informations to the database
        let response = await fetch('/api/groups', {
            method : 'post',
            headers : {
                "Content-Type" : "application/json"
            },
            body : JSON.stringify(group)
        });

        return await response.json();

    }

    // modify an existing Musician row in the database
    static modifyGroupProfile = async (group, image) => {
        // this function works in two steps as described previously in the createGroupProfile function
        let imagePath = null;
        if (image !== undefined) {
            let data = new FormData();
            data.append('file', image);
            imagePath = await fetch('/api/media/images', {
                method : 'post',
                // do not specify a Content-Type as the browser will do it automatically, along with the file size
                body : data
            });
        }

        group.profilePicturePath = (imagePath != null) ? (await imagePath.json())['filePath'] : group.profilePicturePath;

        let response = await fetch('/api/groups', {
            method : 'put',
            headers : {
                "Content-Type" : "application/json"
            },
            body : JSON.stringify(group)
        });

        return await response.json();

    }

    // send a logout request for the currently logged in group
    static logoutGroup = async () => {
        let response = await fetch('/api/logout/groups/current', {
            method : 'delete',
        });

        return await response.json();
    }

    /* ===== Announcements Endpoints ===== */

    // get all announcements, the result can be filtered by passing a filtering query
    static getAllAnnouncements = async (filterQuery) => {
        let url = "/api/announcements";
        if (filterQuery) url += "?" + filterQuery;

        let response = await fetch(url, {
            method : 'get',
            headers : {
                'Accept': 'application/json'
            }
        });

        return await response.json();
    }

    // insert a new Announcement entry in the database
    static publishNewAnnouncement = async (announcement) => {
        let response = await fetch('/api/announcements', {
            method : 'post',
            headers : {
                "Content-Type" : "application/json"
            },
            body : JSON.stringify(announcement)
        });

        return await response.json();
    }

    // remove an Announcement row from the database
    static deleteAnnouncement = async (announcementID) => {
        let response = await fetch('/api/announcements/' + announcementID, {
            method : 'delete',
            headers : {
                'Accept' : 'application/json'
            }
        });
    }

    /* ===== Demos Endpoints ===== */

    // get all demos uploaded by a user
    static getUserDemos = async (authorID, authorType) => {
        let url = `/api/demos?authorType=${authorType}&authorID=${authorID}`;

        let response = await fetch(url, {
            method : 'get',
            headers : {
                'Accept' : 'application/json'
            }
        })

        return await response.json();
    }

    // upload a new demo file
    static uploadNewDemo = async (demo, audio) => {
        // this function works in two separated steps:

        // (1) if an audio file is passed, a first fetch is used to upload the file to the server and retrieve the generated file path
        let data = new FormData();
        data.append('file', audio);
        let response = await fetch('/api/media/demos', {
            method : 'post',
            // do not specify a Content-Type as the browser will do it automatically
            body : data
        });

        // if there was an upload error return it
        if (!response.ok) return await response.json();

        response = await response.json();

        // the file path is inserted in the demo object
        demo.filePath = response.filePath;

        // (2) a second fetch is used to insert a new Demo in the database
        response = await fetch('/api/demos', {
            method : 'post',
            headers : {
                "Content-Type" : "application/json"
            },
            body : JSON.stringify(demo)
        });

        return await response.json();
    }

    // delete a demo row from the database
    static deleteDemo = async (demoID) => {
        let response = await fetch('/api/demos/' + demoID, {
            method : 'delete',
            headers : {
                'Accept' : 'application/json'
            }
        });

        return await response.json();
    }
}
